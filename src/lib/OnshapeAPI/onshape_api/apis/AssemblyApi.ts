/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn\'t used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here\'s [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.164.16301-d273853a12e7
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTAssemblyDefinitionInfo,
  BTAssemblyFeatureListResponse1174,
  BTAssemblyInsertTransformedInstancesResponse,
  BTAssemblyInstanceDefinitionParams,
  BTAssemblyModificationParams,
  BTAssemblyTransformDefinitionParams,
  BTAssemblyTransformedInstancesDefinitionParams,
  BTBillOfMaterialsInfo,
  BTBoundingBoxInfo,
  BTDocumentElementInfo,
  BTFeatureApiBase1430,
  BTFeatureDefinitionCall1406,
  BTFeatureDefinitionResponse1617,
  BTFeatureSpecsResponse664,
  BTMassPropertiesInfo,
  BTModelElementParams,
  BTNamedViewsInfo,
  BTOccurrence74,
  BTShadedViewsInfo,
  BTTranslateFormatParams,
  BTTranslationRequestInfo,
  BTViewFeatureBaseInfo,
} from '../models';
import {
    BTAssemblyDefinitionInfoFromJSON,
    BTAssemblyDefinitionInfoToJSON,
    BTAssemblyFeatureListResponse1174FromJSON,
    BTAssemblyFeatureListResponse1174ToJSON,
    BTAssemblyInsertTransformedInstancesResponseFromJSON,
    BTAssemblyInsertTransformedInstancesResponseToJSON,
    BTAssemblyInstanceDefinitionParamsFromJSON,
    BTAssemblyInstanceDefinitionParamsToJSON,
    BTAssemblyModificationParamsFromJSON,
    BTAssemblyModificationParamsToJSON,
    BTAssemblyTransformDefinitionParamsFromJSON,
    BTAssemblyTransformDefinitionParamsToJSON,
    BTAssemblyTransformedInstancesDefinitionParamsFromJSON,
    BTAssemblyTransformedInstancesDefinitionParamsToJSON,
    BTBillOfMaterialsInfoFromJSON,
    BTBillOfMaterialsInfoToJSON,
    BTBoundingBoxInfoFromJSON,
    BTBoundingBoxInfoToJSON,
    BTDocumentElementInfoFromJSON,
    BTDocumentElementInfoToJSON,
    BTFeatureApiBase1430FromJSON,
    BTFeatureApiBase1430ToJSON,
    BTFeatureDefinitionCall1406FromJSON,
    BTFeatureDefinitionCall1406ToJSON,
    BTFeatureDefinitionResponse1617FromJSON,
    BTFeatureDefinitionResponse1617ToJSON,
    BTFeatureSpecsResponse664FromJSON,
    BTFeatureSpecsResponse664ToJSON,
    BTMassPropertiesInfoFromJSON,
    BTMassPropertiesInfoToJSON,
    BTModelElementParamsFromJSON,
    BTModelElementParamsToJSON,
    BTNamedViewsInfoFromJSON,
    BTNamedViewsInfoToJSON,
    BTOccurrence74FromJSON,
    BTOccurrence74ToJSON,
    BTShadedViewsInfoFromJSON,
    BTShadedViewsInfoToJSON,
    BTTranslateFormatParamsFromJSON,
    BTTranslateFormatParamsToJSON,
    BTTranslationRequestInfoFromJSON,
    BTTranslationRequestInfoToJSON,
    BTViewFeatureBaseInfoFromJSON,
    BTViewFeatureBaseInfoToJSON,
} from '../models';

export interface AddFeatureRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    bTFeatureDefinitionCall1406?: BTFeatureDefinitionCall1406;
}

export interface CreateAssemblyRequest {
    did: string;
    wid: string;
    bTModelElementParams: BTModelElementParams;
}

export interface CreateInstanceRequest {
    did: string;
    wid: string;
    eid: string;
    bTAssemblyInstanceDefinitionParams?: BTAssemblyInstanceDefinitionParams;
}

export interface DeleteFeatureRequest {
    did: string;
    wid: string;
    eid: string;
    fid: string;
}

export interface DeleteInstanceRequest {
    did: string;
    eid: string;
    wid: string;
    nid: string;
}

export interface GetAssemblyBoundingBoxesRequest {
    did: string;
    wvm: GetAssemblyBoundingBoxesWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    explodedViewId?: string;
    includeHidden?: boolean;
    displayStateId?: string;
    namedPositionId?: string;
    includeSketches?: boolean;
}

export interface GetAssemblyDefinitionRequest {
    did: string;
    wvm: GetAssemblyDefinitionWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    explodedViewId?: string;
    includeMateFeatures?: boolean;
    includeNonSolids?: boolean;
    includeMateConnectors?: boolean;
    excludeSuppressed?: boolean;
}

export interface GetAssemblyMassPropertiesRequest {
    did: string;
    wvm: GetAssemblyMassPropertiesWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
}

export interface GetAssemblyShadedViewsRequest {
    did: string;
    wvm: GetAssemblyShadedViewsWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    explodedViewId?: string;
    viewMatrix?: string;
    outputHeight?: number;
    outputWidth?: number;
    pixelSize?: number;
    edges?: string;
    showAllParts?: boolean;
    includeSurfaces?: boolean;
    useAntiAliasing?: boolean;
    includeWires?: boolean;
    displayStateId?: string;
    namedPositionId?: string;
}

export interface GetBillOfMaterialsRequest {
    did: string;
    wvm: GetBillOfMaterialsWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    bomColumnIds?: Array<string>;
    indented?: boolean;
    multiLevel?: boolean;
    generateIfAbsent?: boolean;
    templateId?: string;
    includeExcluded?: boolean;
    onlyVisibleColumns?: boolean;
    ignoreSubassemblyBomBehavior?: boolean;
    includeItemMicroversions?: boolean;
    includeTopLevelAssemblyRow?: boolean;
    thumbnail?: boolean;
}

export interface GetExplodedViewsRequest {
    did: string;
    wvm: GetExplodedViewsWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    explodedViewId?: string;
}

export interface GetFeatureSpecsRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
}

export interface GetFeaturesRequest {
    did: string;
    wvm: GetFeaturesWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    explodedViewId?: string;
    featureId?: Array<string>;
}

export interface GetNamedPositionsRequest {
    did: string;
    wvm: GetNamedPositionsWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    explodedViewId?: string;
}

export interface GetNamedViewsRequest {
    did: string;
    eid: string;
    linkDocumentId?: string;
    skipPerspective?: boolean;
    includeSectionCutViews?: boolean;
}

export interface GetOrCreateBillOfMaterialsElementRequest {
    did: string;
    wid: string;
    eid: string;
}

export interface InsertTransformedInstancesRequest {
    did: string;
    eid: string;
    wid: string;
    bTAssemblyTransformedInstancesDefinitionParams: BTAssemblyTransformedInstancesDefinitionParams;
}

export interface ModifyRequest {
    did: string;
    wid: string;
    eid: string;
    linkDocumentId?: string;
    bTAssemblyModificationParams?: BTAssemblyModificationParams;
}

export interface TransformOccurrencesRequest {
    did: string;
    eid: string;
    wid: string;
    bTAssemblyTransformDefinitionParams?: BTAssemblyTransformDefinitionParams;
}

export interface TranslateFormatRequest {
    did: string;
    wv: string;
    wvid: string;
    eid: string;
    bTTranslateFormatParams: BTTranslateFormatParams;
}

export interface UpdateFeatureRequest {
    did: string;
    wid: string;
    eid: string;
    fid: string;
    bTFeatureDefinitionCall1406?: BTFeatureDefinitionCall1406;
}

/**
 * 
 */
export class AssemblyApi extends runtime.BaseAPI {

    /**
     * Create features array by document ID, workspace or version or microversion ID, and tab ID.
     */
    async addFeatureRaw(requestParameters: AddFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureDefinitionResponse1617>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling addFeature.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling addFeature.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling addFeature.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling addFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTFeatureDefinitionCall1406ToJSON(requestParameters.bTFeatureDefinitionCall1406),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureDefinitionResponse1617FromJSON(jsonValue));
    }

    /**
     * Create features array by document ID, workspace or version or microversion ID, and tab ID.
     */
    async addFeature(requestParameters: AddFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureDefinitionResponse1617> {
        const response = await this.addFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Assembly by document ID and workspace ID.
     */
    async createAssemblyRaw(requestParameters: CreateAssemblyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTDocumentElementInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling createAssembly.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling createAssembly.');
        }

        if (requestParameters.bTModelElementParams === null || requestParameters.bTModelElementParams === undefined) {
            throw new runtime.RequiredError('bTModelElementParams','Required parameter requestParameters.bTModelElementParams was null or undefined when calling createAssembly.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTModelElementParamsToJSON(requestParameters.bTModelElementParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTDocumentElementInfoFromJSON(jsonValue));
    }

    /**
     * Create Assembly by document ID and workspace ID.
     */
    async createAssembly(requestParameters: CreateAssemblyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTDocumentElementInfo> {
        const response = await this.createAssemblyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Assembly instances by document ID, workspace ID, and tab ID.
     */
    async createInstanceRaw(requestParameters: CreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BTOccurrence74>>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling createInstance.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling createInstance.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling createInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read", "OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}/e/{eid}/instances`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTAssemblyInstanceDefinitionParamsToJSON(requestParameters.bTAssemblyInstanceDefinitionParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BTOccurrence74FromJSON));
    }

    /**
     * Create Assembly instances by document ID, workspace ID, and tab ID.
     */
    async createInstance(requestParameters: CreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BTOccurrence74>> {
        const response = await this.createInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a feature by document ID, workspace ID, tab ID, and feature ID.
     */
    async deleteFeatureRaw(requestParameters: DeleteFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureApiBase1430>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling deleteFeature.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling deleteFeature.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling deleteFeature.');
        }

        if (requestParameters.fid === null || requestParameters.fid === undefined) {
            throw new runtime.RequiredError('fid','Required parameter requestParameters.fid was null or undefined when calling deleteFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters.fid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureApiBase1430FromJSON(jsonValue));
    }

    /**
     * Delete a feature by document ID, workspace ID, tab ID, and feature ID.
     */
    async deleteFeature(requestParameters: DeleteFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureApiBase1430> {
        const response = await this.deleteFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an instance by document ID, workspace ID, tab ID, and node ID.
     */
    async deleteInstanceRaw(requestParameters: DeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling deleteInstance.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling deleteInstance.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling deleteInstance.');
        }

        if (requestParameters.nid === null || requestParameters.nid === undefined) {
            throw new runtime.RequiredError('nid','Required parameter requestParameters.nid was null or undefined when calling deleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}/e/{eid}/instance/nodeid/{nid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"nid"}}`, encodeURIComponent(String(requestParameters.nid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an instance by document ID, workspace ID, tab ID, and node ID.
     */
    async deleteInstance(requestParameters: DeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve bounding boxes by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getAssemblyBoundingBoxesRaw(requestParameters: GetAssemblyBoundingBoxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTBoundingBoxInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getAssemblyBoundingBoxes.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getAssemblyBoundingBoxes.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getAssemblyBoundingBoxes.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getAssemblyBoundingBoxes.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.explodedViewId !== undefined) {
            queryParameters['explodedViewId'] = requestParameters.explodedViewId;
        }

        if (requestParameters.includeHidden !== undefined) {
            queryParameters['includeHidden'] = requestParameters.includeHidden;
        }

        if (requestParameters.displayStateId !== undefined) {
            queryParameters['displayStateId'] = requestParameters.displayStateId;
        }

        if (requestParameters.namedPositionId !== undefined) {
            queryParameters['namedPositionId'] = requestParameters.namedPositionId;
        }

        if (requestParameters.includeSketches !== undefined) {
            queryParameters['includeSketches'] = requestParameters.includeSketches;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTBoundingBoxInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve bounding boxes by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getAssemblyBoundingBoxes(requestParameters: GetAssemblyBoundingBoxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTBoundingBoxInfo> {
        const response = await this.getAssemblyBoundingBoxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve assembly by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getAssemblyDefinitionRaw(requestParameters: GetAssemblyDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTAssemblyDefinitionInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getAssemblyDefinition.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getAssemblyDefinition.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getAssemblyDefinition.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getAssemblyDefinition.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.explodedViewId !== undefined) {
            queryParameters['explodedViewId'] = requestParameters.explodedViewId;
        }

        if (requestParameters.includeMateFeatures !== undefined) {
            queryParameters['includeMateFeatures'] = requestParameters.includeMateFeatures;
        }

        if (requestParameters.includeNonSolids !== undefined) {
            queryParameters['includeNonSolids'] = requestParameters.includeNonSolids;
        }

        if (requestParameters.includeMateConnectors !== undefined) {
            queryParameters['includeMateConnectors'] = requestParameters.includeMateConnectors;
        }

        if (requestParameters.excludeSuppressed !== undefined) {
            queryParameters['excludeSuppressed'] = requestParameters.excludeSuppressed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTAssemblyDefinitionInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve assembly by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getAssemblyDefinition(requestParameters: GetAssemblyDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTAssemblyDefinitionInfo> {
        const response = await this.getAssemblyDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAssemblyMassPropertiesRaw(requestParameters: GetAssemblyMassPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMassPropertiesInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getAssemblyMassProperties.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getAssemblyMassProperties.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getAssemblyMassProperties.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getAssemblyMassProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMassPropertiesInfoFromJSON(jsonValue));
    }

    /**
     */
    async getAssemblyMassProperties(requestParameters: GetAssemblyMassPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMassPropertiesInfo> {
        const response = await this.getAssemblyMassPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an array of shaded view images by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getAssemblyShadedViewsRaw(requestParameters: GetAssemblyShadedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTShadedViewsInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getAssemblyShadedViews.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getAssemblyShadedViews.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getAssemblyShadedViews.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getAssemblyShadedViews.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.explodedViewId !== undefined) {
            queryParameters['explodedViewId'] = requestParameters.explodedViewId;
        }

        if (requestParameters.viewMatrix !== undefined) {
            queryParameters['viewMatrix'] = requestParameters.viewMatrix;
        }

        if (requestParameters.outputHeight !== undefined) {
            queryParameters['outputHeight'] = requestParameters.outputHeight;
        }

        if (requestParameters.outputWidth !== undefined) {
            queryParameters['outputWidth'] = requestParameters.outputWidth;
        }

        if (requestParameters.pixelSize !== undefined) {
            queryParameters['pixelSize'] = requestParameters.pixelSize;
        }

        if (requestParameters.edges !== undefined) {
            queryParameters['edges'] = requestParameters.edges;
        }

        if (requestParameters.showAllParts !== undefined) {
            queryParameters['showAllParts'] = requestParameters.showAllParts;
        }

        if (requestParameters.includeSurfaces !== undefined) {
            queryParameters['includeSurfaces'] = requestParameters.includeSurfaces;
        }

        if (requestParameters.useAntiAliasing !== undefined) {
            queryParameters['useAntiAliasing'] = requestParameters.useAntiAliasing;
        }

        if (requestParameters.includeWires !== undefined) {
            queryParameters['includeWires'] = requestParameters.includeWires;
        }

        if (requestParameters.displayStateId !== undefined) {
            queryParameters['displayStateId'] = requestParameters.displayStateId;
        }

        if (requestParameters.namedPositionId !== undefined) {
            queryParameters['namedPositionId'] = requestParameters.namedPositionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTShadedViewsInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve an array of shaded view images by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getAssemblyShadedViews(requestParameters: GetAssemblyShadedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTShadedViewsInfo> {
        const response = await this.getAssemblyShadedViewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the bill of materials (BOM) by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getBillOfMaterialsRaw(requestParameters: GetBillOfMaterialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTBillOfMaterialsInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getBillOfMaterials.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getBillOfMaterials.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getBillOfMaterials.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getBillOfMaterials.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.bomColumnIds) {
            queryParameters['bomColumnIds'] = requestParameters.bomColumnIds;
        }

        if (requestParameters.indented !== undefined) {
            queryParameters['indented'] = requestParameters.indented;
        }

        if (requestParameters.multiLevel !== undefined) {
            queryParameters['multiLevel'] = requestParameters.multiLevel;
        }

        if (requestParameters.generateIfAbsent !== undefined) {
            queryParameters['generateIfAbsent'] = requestParameters.generateIfAbsent;
        }

        if (requestParameters.templateId !== undefined) {
            queryParameters['templateId'] = requestParameters.templateId;
        }

        if (requestParameters.includeExcluded !== undefined) {
            queryParameters['includeExcluded'] = requestParameters.includeExcluded;
        }

        if (requestParameters.onlyVisibleColumns !== undefined) {
            queryParameters['onlyVisibleColumns'] = requestParameters.onlyVisibleColumns;
        }

        if (requestParameters.ignoreSubassemblyBomBehavior !== undefined) {
            queryParameters['ignoreSubassemblyBomBehavior'] = requestParameters.ignoreSubassemblyBomBehavior;
        }

        if (requestParameters.includeItemMicroversions !== undefined) {
            queryParameters['includeItemMicroversions'] = requestParameters.includeItemMicroversions;
        }

        if (requestParameters.includeTopLevelAssemblyRow !== undefined) {
            queryParameters['includeTopLevelAssemblyRow'] = requestParameters.includeTopLevelAssemblyRow;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/bom`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTBillOfMaterialsInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve the bill of materials (BOM) by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getBillOfMaterials(requestParameters: GetBillOfMaterialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTBillOfMaterialsInfo> {
        const response = await this.getBillOfMaterialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getExplodedViewsRaw(requestParameters: GetExplodedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BTViewFeatureBaseInfo>>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getExplodedViews.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getExplodedViews.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getExplodedViews.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getExplodedViews.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.explodedViewId !== undefined) {
            queryParameters['explodedViewId'] = requestParameters.explodedViewId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/explodedviews`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BTViewFeatureBaseInfoFromJSON));
    }

    /**
     */
    async getExplodedViews(requestParameters: GetExplodedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BTViewFeatureBaseInfo>> {
        const response = await this.getExplodedViewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve feature specifications array by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getFeatureSpecsRaw(requestParameters: GetFeatureSpecsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureSpecsResponse664>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getFeatureSpecs.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getFeatureSpecs.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getFeatureSpecs.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getFeatureSpecs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureSpecsResponse664FromJSON(jsonValue));
    }

    /**
     * Retrieve feature specifications array by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getFeatureSpecs(requestParameters: GetFeatureSpecsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureSpecsResponse664> {
        const response = await this.getFeatureSpecsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve features array by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getFeaturesRaw(requestParameters: GetFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTAssemblyFeatureListResponse1174>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getFeatures.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getFeatures.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getFeatures.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getFeatures.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.explodedViewId !== undefined) {
            queryParameters['explodedViewId'] = requestParameters.explodedViewId;
        }

        if (requestParameters.featureId) {
            queryParameters['featureId'] = requestParameters.featureId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTAssemblyFeatureListResponse1174FromJSON(jsonValue));
    }

    /**
     * Retrieve features array by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getFeatures(requestParameters: GetFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTAssemblyFeatureListResponse1174> {
        const response = await this.getFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getNamedPositionsRaw(requestParameters: GetNamedPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BTViewFeatureBaseInfo>>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getNamedPositions.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getNamedPositions.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getNamedPositions.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getNamedPositions.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.explodedViewId !== undefined) {
            queryParameters['explodedViewId'] = requestParameters.explodedViewId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/namedpositions`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BTViewFeatureBaseInfoFromJSON));
    }

    /**
     */
    async getNamedPositions(requestParameters: GetNamedPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BTViewFeatureBaseInfo>> {
        const response = await this.getNamedPositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getNamedViewsRaw(requestParameters: GetNamedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTNamedViewsInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getNamedViews.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getNamedViews.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.skipPerspective !== undefined) {
            queryParameters['skipPerspective'] = requestParameters.skipPerspective;
        }

        if (requestParameters.includeSectionCutViews !== undefined) {
            queryParameters['includeSectionCutViews'] = requestParameters.includeSectionCutViews;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/e/{eid}/namedViews`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTNamedViewsInfoFromJSON(jsonValue));
    }

    /**
     */
    async getNamedViews(requestParameters: GetNamedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTNamedViewsInfo> {
        const response = await this.getNamedViewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a bill of materials (BOM) table by document ID, workspace ID, and tab ID.
     */
    async getOrCreateBillOfMaterialsElementRaw(requestParameters: GetOrCreateBillOfMaterialsElementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTDocumentElementInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getOrCreateBillOfMaterialsElement.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling getOrCreateBillOfMaterialsElement.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getOrCreateBillOfMaterialsElement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}/e/{eid}/bomelement`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTDocumentElementInfoFromJSON(jsonValue));
    }

    /**
     * Create a bill of materials (BOM) table by document ID, workspace ID, and tab ID.
     */
    async getOrCreateBillOfMaterialsElement(requestParameters: GetOrCreateBillOfMaterialsElementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTDocumentElementInfo> {
        const response = await this.getOrCreateBillOfMaterialsElementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an instance transform by document ID, workspace ID, and tab ID.
     */
    async insertTransformedInstancesRaw(requestParameters: InsertTransformedInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTAssemblyInsertTransformedInstancesResponse>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling insertTransformedInstances.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling insertTransformedInstances.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling insertTransformedInstances.');
        }

        if (requestParameters.bTAssemblyTransformedInstancesDefinitionParams === null || requestParameters.bTAssemblyTransformedInstancesDefinitionParams === undefined) {
            throw new runtime.RequiredError('bTAssemblyTransformedInstancesDefinitionParams','Required parameter requestParameters.bTAssemblyTransformedInstancesDefinitionParams was null or undefined when calling insertTransformedInstances.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read", "OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}/e/{eid}/transformedinstances`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTAssemblyTransformedInstancesDefinitionParamsToJSON(requestParameters.bTAssemblyTransformedInstancesDefinitionParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTAssemblyInsertTransformedInstancesResponseFromJSON(jsonValue));
    }

    /**
     * Create an instance transform by document ID, workspace ID, and tab ID.
     */
    async insertTransformedInstances(requestParameters: InsertTransformedInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTAssemblyInsertTransformedInstancesResponse> {
        const response = await this.insertTransformedInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify assembly by document ID, workspace ID and tab ID.
     */
    async modifyRaw(requestParameters: ModifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling modify.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling modify.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling modify.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}/e/{eid}/modify`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTAssemblyModificationParamsToJSON(requestParameters.bTAssemblyModificationParams),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Modify assembly by document ID, workspace ID and tab ID.
     */
    async modify(requestParameters: ModifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an occurrence transform by document ID, workspace ID, and tab ID.
     */
    async transformOccurrencesRaw(requestParameters: TransformOccurrencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling transformOccurrences.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling transformOccurrences.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling transformOccurrences.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read", "OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}/e/{eid}/occurrencetransforms`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTAssemblyTransformDefinitionParamsToJSON(requestParameters.bTAssemblyTransformDefinitionParams),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create an occurrence transform by document ID, workspace ID, and tab ID.
     */
    async transformOccurrences(requestParameters: TransformOccurrencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.transformOccurrencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create assembly translation by document ID, workspace or version ID, and tab ID.
     */
    async translateFormatRaw(requestParameters: TranslateFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTTranslationRequestInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling translateFormat.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling translateFormat.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling translateFormat.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling translateFormat.');
        }

        if (requestParameters.bTTranslateFormatParams === null || requestParameters.bTTranslateFormatParams === undefined) {
            throw new runtime.RequiredError('bTTranslateFormatParams','Required parameter requestParameters.bTTranslateFormatParams was null or undefined when calling translateFormat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/translations`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTTranslateFormatParamsToJSON(requestParameters.bTTranslateFormatParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTTranslationRequestInfoFromJSON(jsonValue));
    }

    /**
     * Create assembly translation by document ID, workspace or version ID, and tab ID.
     */
    async translateFormat(requestParameters: TranslateFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTTranslationRequestInfo> {
        const response = await this.translateFormatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a feature by document ID, workspace ID, tab ID, and feature ID.
     */
    async updateFeatureRaw(requestParameters: UpdateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureDefinitionResponse1617>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateFeature.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling updateFeature.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling updateFeature.');
        }

        if (requestParameters.fid === null || requestParameters.fid === undefined) {
            throw new runtime.RequiredError('fid','Required parameter requestParameters.fid was null or undefined when calling updateFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters.fid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTFeatureDefinitionCall1406ToJSON(requestParameters.bTFeatureDefinitionCall1406),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureDefinitionResponse1617FromJSON(jsonValue));
    }

    /**
     * Upload a feature by document ID, workspace ID, tab ID, and feature ID.
     */
    async updateFeature(requestParameters: UpdateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureDefinitionResponse1617> {
        const response = await this.updateFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAssemblyBoundingBoxesWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetAssemblyBoundingBoxesWvmEnum = typeof GetAssemblyBoundingBoxesWvmEnum[keyof typeof GetAssemblyBoundingBoxesWvmEnum];
/**
 * @export
 */
export const GetAssemblyDefinitionWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetAssemblyDefinitionWvmEnum = typeof GetAssemblyDefinitionWvmEnum[keyof typeof GetAssemblyDefinitionWvmEnum];
/**
 * @export
 */
export const GetAssemblyMassPropertiesWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetAssemblyMassPropertiesWvmEnum = typeof GetAssemblyMassPropertiesWvmEnum[keyof typeof GetAssemblyMassPropertiesWvmEnum];
/**
 * @export
 */
export const GetAssemblyShadedViewsWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetAssemblyShadedViewsWvmEnum = typeof GetAssemblyShadedViewsWvmEnum[keyof typeof GetAssemblyShadedViewsWvmEnum];
/**
 * @export
 */
export const GetBillOfMaterialsWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetBillOfMaterialsWvmEnum = typeof GetBillOfMaterialsWvmEnum[keyof typeof GetBillOfMaterialsWvmEnum];
/**
 * @export
 */
export const GetExplodedViewsWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetExplodedViewsWvmEnum = typeof GetExplodedViewsWvmEnum[keyof typeof GetExplodedViewsWvmEnum];
/**
 * @export
 */
export const GetFeaturesWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetFeaturesWvmEnum = typeof GetFeaturesWvmEnum[keyof typeof GetFeaturesWvmEnum];
/**
 * @export
 */
export const GetNamedPositionsWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetNamedPositionsWvmEnum = typeof GetNamedPositionsWvmEnum[keyof typeof GetNamedPositionsWvmEnum];
