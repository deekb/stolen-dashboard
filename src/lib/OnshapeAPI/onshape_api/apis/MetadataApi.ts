/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn\'t used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here\'s [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.164.16301-d273853a12e7
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTMetadataObjectInfo,
  BTMetadataObjectListInfoBTMetadataElementInfo,
  BTMetadataObjectListInfoBTMetadataPartInfo,
} from '../models';
import {
    BTMetadataObjectInfoFromJSON,
    BTMetadataObjectInfoToJSON,
    BTMetadataObjectListInfoBTMetadataElementInfoFromJSON,
    BTMetadataObjectListInfoBTMetadataElementInfoToJSON,
    BTMetadataObjectListInfoBTMetadataPartInfoFromJSON,
    BTMetadataObjectListInfoBTMetadataPartInfoToJSON,
} from '../models';

export interface GetVEOPStandardContentMetadataRequest {
    did: string;
    vid: string;
    eid: string;
    pid: string;
    _configuration?: string;
    linkDocumentId?: string;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWMVEMetadataRequest {
    did: string;
    wvm: GetWMVEMetadataWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    inferMetadataOwner?: boolean;
    depth?: string;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWMVEPMetadataRequest {
    did: string;
    wvm: GetWMVEPMetadataWvmEnum;
    wvmid: string;
    eid: string;
    iden: GetWMVEPMetadataIdenEnum;
    pid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    inferMetadataOwner?: boolean;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWMVEPsMetadataRequest {
    did: string;
    wvm: GetWMVEPsMetadataWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    inferMetadataOwner?: boolean;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWMVEsMetadataRequest {
    did: string;
    wvm: string;
    wvmid: string;
    linkDocumentId?: string;
    inferMetadataOwner?: boolean;
    depth?: string;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWVMetadataRequest {
    did: string;
    wv: string;
    wvid: string;
    linkDocumentId?: string;
    inferMetadataOwner?: boolean;
    depth?: string;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface UpdateVEOPStandardContentPartMetadataRequest {
    did: string;
    linkDocumentId: string;
    body: string;
}

export interface UpdateWVEMetadataRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    body: string;
    _configuration?: string;
}

export interface UpdateWVEPMetadataRequest {
    did: string;
    wvm: UpdateWVEPMetadataWvmEnum;
    wvmid: string;
    eid: string;
    iden: UpdateWVEPMetadataIdenEnum;
    pid: string;
    body: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
}

export interface UpdateWVMetadataRequest {
    did: string;
    wv: string;
    wvid: string;
    body: string;
}

/**
 * 
 */
export class MetadataApi extends runtime.BaseAPI {

    /**
     * Retrieve metadata of a standard content part in a version by document ID, version ID, tab ID, owner ID, and part ID.
     */
    async getVEOPStandardContentMetadataRaw(requestParameters: GetVEOPStandardContentMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getVEOPStandardContentMetadata.');
        }

        if (requestParameters.vid === null || requestParameters.vid === undefined) {
            throw new runtime.RequiredError('vid','Required parameter requestParameters.vid was null or undefined when calling getVEOPStandardContentMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getVEOPStandardContentMetadata.');
        }

        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling getVEOPStandardContentMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/p/{pid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"vid"}}`, encodeURIComponent(String(requestParameters.vid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve metadata of a standard content part in a version by document ID, version ID, tab ID, owner ID, and part ID.
     */
    async getVEOPStandardContentMetadata(requestParameters: GetVEOPStandardContentMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectInfo> {
        const response = await this.getVEOPStandardContentMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve metadata by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getWMVEMetadataRaw(requestParameters: GetWMVEMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWMVEMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getWMVEMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getWMVEMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getWMVEMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve metadata by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getWMVEMetadata(requestParameters: GetWMVEMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectInfo> {
        const response = await this.getWMVEMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve metadata by document ID, workspace or version or microversion ID, tab ID, and Part ID.
     */
    async getWMVEPMetadataRaw(requestParameters: GetWMVEPMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.iden === null || requestParameters.iden === undefined) {
            throw new runtime.RequiredError('iden','Required parameter requestParameters.iden was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling getWMVEPMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"iden"}}`, encodeURIComponent(String(requestParameters.iden))).replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve metadata by document ID, workspace or version or microversion ID, tab ID, and Part ID.
     */
    async getWMVEPMetadata(requestParameters: GetWMVEPMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectInfo> {
        const response = await this.getWMVEPMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve metadata by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getWMVEPsMetadataRaw(requestParameters: GetWMVEPsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectListInfoBTMetadataPartInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWMVEPsMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getWMVEPsMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getWMVEPsMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getWMVEPsMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectListInfoBTMetadataPartInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve metadata by document ID, workspace or version or microversion ID, and tab ID.
     */
    async getWMVEPsMetadata(requestParameters: GetWMVEPsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectListInfoBTMetadataPartInfo> {
        const response = await this.getWMVEPsMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve metadata by document ID and workspace or version or microversion ID.
     */
    async getWMVEsMetadataRaw(requestParameters: GetWMVEsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectListInfoBTMetadataElementInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWMVEsMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getWMVEsMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getWMVEsMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectListInfoBTMetadataElementInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve metadata by document ID and workspace or version or microversion ID.
     */
    async getWMVEsMetadata(requestParameters: GetWMVEsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectListInfoBTMetadataElementInfo> {
        const response = await this.getWMVEsMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve workspace or version metadata by document ID and workspace or version ID.
     */
    async getWVMetadataRaw(requestParameters: GetWVMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWVMetadata.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getWVMetadata.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getWVMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wv}/{wvid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve workspace or version metadata by document ID and workspace or version ID.
     */
    async getWVMetadata(requestParameters: GetWVMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectInfo> {
        const response = await this.getWVMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update metadata of a standard content part in a version by document ID, version ID, tab ID, owner ID, and part ID.
     */
    async updateVEOPStandardContentPartMetadataRaw(requestParameters: UpdateVEOPStandardContentPartMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }

        if (requestParameters.linkDocumentId === null || requestParameters.linkDocumentId === undefined) {
            throw new runtime.RequiredError('linkDocumentId','Required parameter requestParameters.linkDocumentId was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/standardcontent/d/{did}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update metadata of a standard content part in a version by document ID, version ID, tab ID, owner ID, and part ID.
     */
    async updateVEOPStandardContentPartMetadata(requestParameters: UpdateVEOPStandardContentPartMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateVEOPStandardContentPartMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update workspace metadata by document ID, workspace or version or microversion ID, and tab ID.
     */
    async updateWVEMetadataRaw(requestParameters: UpdateWVEMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateWVEMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling updateWVEMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling updateWVEMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling updateWVEMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWVEMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update workspace metadata by document ID, workspace or version or microversion ID, and tab ID.
     */
    async updateWVEMetadata(requestParameters: UpdateWVEMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateWVEMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update workspace metadata by document ID, workspace or version or microversion ID, tab ID, and part ID.
     */
    async updateWVEPMetadataRaw(requestParameters: UpdateWVEPMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.iden === null || requestParameters.iden === undefined) {
            throw new runtime.RequiredError('iden','Required parameter requestParameters.iden was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWVEPMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"iden"}}`, encodeURIComponent(String(requestParameters.iden))).replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update workspace metadata by document ID, workspace or version or microversion ID, tab ID, and part ID.
     */
    async updateWVEPMetadata(requestParameters: UpdateWVEPMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateWVEPMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update workspace or version metadata by document ID and workspace or version ID.
     */
    async updateWVMetadataRaw(requestParameters: UpdateWVMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateWVMetadata.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling updateWVMetadata.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling updateWVMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWVMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wv}/{wvid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update workspace or version metadata by document ID and workspace or version ID.
     */
    async updateWVMetadata(requestParameters: UpdateWVMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateWVMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetWMVEMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetWMVEMetadataWvmEnum = typeof GetWMVEMetadataWvmEnum[keyof typeof GetWMVEMetadataWvmEnum];
/**
 * @export
 */
export const GetWMVEPMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetWMVEPMetadataWvmEnum = typeof GetWMVEPMetadataWvmEnum[keyof typeof GetWMVEPMetadataWvmEnum];
/**
 * @export
 */
export const GetWMVEPMetadataIdenEnum = {
    P: 'p',
    Pi: 'pi'
} as const;
export type GetWMVEPMetadataIdenEnum = typeof GetWMVEPMetadataIdenEnum[keyof typeof GetWMVEPMetadataIdenEnum];
/**
 * @export
 */
export const GetWMVEPsMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetWMVEPsMetadataWvmEnum = typeof GetWMVEPsMetadataWvmEnum[keyof typeof GetWMVEPsMetadataWvmEnum];
/**
 * @export
 */
export const UpdateWVEPMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type UpdateWVEPMetadataWvmEnum = typeof UpdateWVEPMetadataWvmEnum[keyof typeof UpdateWVEPMetadataWvmEnum];
/**
 * @export
 */
export const UpdateWVEPMetadataIdenEnum = {
    P: 'p',
    Pi: 'pi'
} as const;
export type UpdateWVEPMetadataIdenEnum = typeof UpdateWVEPMetadataIdenEnum[keyof typeof UpdateWVEPMetadataIdenEnum];
