/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn\'t used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here\'s [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.164.16301-d273853a12e7
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTDocumentElementInfo,
  BTModelElementParams,
  BTVariableParams,
  BTVariableStudioReferenceListInfo,
  BTVariableStudioScopeInfo,
  BTVariableTableInfo,
} from '../models';
import {
    BTDocumentElementInfoFromJSON,
    BTDocumentElementInfoToJSON,
    BTModelElementParamsFromJSON,
    BTModelElementParamsToJSON,
    BTVariableParamsFromJSON,
    BTVariableParamsToJSON,
    BTVariableStudioReferenceListInfoFromJSON,
    BTVariableStudioReferenceListInfoToJSON,
    BTVariableStudioScopeInfoFromJSON,
    BTVariableStudioScopeInfoToJSON,
    BTVariableTableInfoFromJSON,
    BTVariableTableInfoToJSON,
} from '../models';

export interface CreateVariableStudioRequest {
    did: string;
    wid: string;
    bTModelElementParams: BTModelElementParams;
    linkDocumentId?: string;
}

export interface GetVariableStudioReferencesRequest {
    did: string;
    wv: GetVariableStudioReferencesWvEnum;
    wvid: string;
    eid: string;
    linkDocumentId?: string;
}

export interface GetVariableStudioScopeRequest {
    did: string;
    wv: GetVariableStudioScopeWvEnum;
    wvid: string;
    eid: string;
    linkDocumentId?: string;
}

export interface GetVariablesRequest {
    did: string;
    wv: GetVariablesWvEnum;
    wvid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    includeValuesAndReferencedVariables?: boolean;
}

export interface SetVariableStudioReferencesRequest {
    did: string;
    wid: string;
    eid: string;
    bTVariableStudioReferenceListInfo: BTVariableStudioReferenceListInfo;
    linkDocumentId?: string;
}

export interface SetVariableStudioScopeRequest {
    did: string;
    wid: string;
    eid: string;
    bTVariableStudioScopeInfo: BTVariableStudioScopeInfo;
    linkDocumentId?: string;
}

export interface SetVariablesRequest {
    did: string;
    wid: string;
    eid: string;
    bTVariableParams: Array<BTVariableParams>;
    linkDocumentId?: string;
}

/**
 * 
 */
export class VariablesApi extends runtime.BaseAPI {

    /**
     * Create a Variable studio
     * Create a variable studio
     */
    async createVariableStudioRaw(requestParameters: CreateVariableStudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTDocumentElementInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling createVariableStudio.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling createVariableStudio.');
        }

        if (requestParameters.bTModelElementParams === null || requestParameters.bTModelElementParams === undefined) {
            throw new runtime.RequiredError('bTModelElementParams','Required parameter requestParameters.bTModelElementParams was null or undefined when calling createVariableStudio.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/w/{wid}/variablestudio`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTModelElementParamsToJSON(requestParameters.bTModelElementParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTDocumentElementInfoFromJSON(jsonValue));
    }

    /**
     * Create a Variable studio
     * Create a variable studio
     */
    async createVariableStudio(requestParameters: CreateVariableStudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTDocumentElementInfo> {
        const response = await this.createVariableStudioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an element\'s variable studio references
     * Retrieve the variable studio references from an element
     */
    async getVariableStudioReferencesRaw(requestParameters: GetVariableStudioReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTVariableStudioReferenceListInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getVariableStudioReferences.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getVariableStudioReferences.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getVariableStudioReferences.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getVariableStudioReferences.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/{wv}/{wvid}/e/{eid}/variablestudioreferences`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTVariableStudioReferenceListInfoFromJSON(jsonValue));
    }

    /**
     * Get an element\'s variable studio references
     * Retrieve the variable studio references from an element
     */
    async getVariableStudioReferences(requestParameters: GetVariableStudioReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTVariableStudioReferenceListInfo> {
        const response = await this.getVariableStudioReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the scope of a variable studio
     * Get the scope of a variable studio
     */
    async getVariableStudioScopeRaw(requestParameters: GetVariableStudioScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTVariableStudioScopeInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getVariableStudioScope.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getVariableStudioScope.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getVariableStudioScope.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getVariableStudioScope.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/{wv}/{wvid}/e/{eid}/variablestudioscope`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTVariableStudioScopeInfoFromJSON(jsonValue));
    }

    /**
     * Get the scope of a variable studio
     * Get the scope of a variable studio
     */
    async getVariableStudioScope(requestParameters: GetVariableStudioScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTVariableStudioScopeInfo> {
        const response = await this.getVariableStudioScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets contents of variable tables
     * Retrieve the variables from a variable table
     */
    async getVariablesRaw(requestParameters: GetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTVariableTableInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getVariables.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getVariables.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getVariables.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getVariables.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.includeValuesAndReferencedVariables !== undefined) {
            queryParameters['includeValuesAndReferencedVariables'] = requestParameters.includeValuesAndReferencedVariables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/{wv}/{wvid}/e/{eid}/variables`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTVariableTableInfoFromJSON(jsonValue));
    }

    /**
     * Gets contents of variable tables
     * Retrieve the variables from a variable table
     */
    async getVariables(requestParameters: GetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTVariableTableInfo> {
        const response = await this.getVariablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set an element\'s variable studio references
     * Set the variable studio references for an element
     */
    async setVariableStudioReferencesRaw(requestParameters: SetVariableStudioReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling setVariableStudioReferences.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling setVariableStudioReferences.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling setVariableStudioReferences.');
        }

        if (requestParameters.bTVariableStudioReferenceListInfo === null || requestParameters.bTVariableStudioReferenceListInfo === undefined) {
            throw new runtime.RequiredError('bTVariableStudioReferenceListInfo','Required parameter requestParameters.bTVariableStudioReferenceListInfo was null or undefined when calling setVariableStudioReferences.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/w/{wid}/e/{eid}/variablestudioreferences`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTVariableStudioReferenceListInfoToJSON(requestParameters.bTVariableStudioReferenceListInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set an element\'s variable studio references
     * Set the variable studio references for an element
     */
    async setVariableStudioReferences(requestParameters: SetVariableStudioReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setVariableStudioReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the scope of a variable studio
     * Set the scope of a variable studio
     */
    async setVariableStudioScopeRaw(requestParameters: SetVariableStudioScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling setVariableStudioScope.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling setVariableStudioScope.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling setVariableStudioScope.');
        }

        if (requestParameters.bTVariableStudioScopeInfo === null || requestParameters.bTVariableStudioScopeInfo === undefined) {
            throw new runtime.RequiredError('bTVariableStudioScopeInfo','Required parameter requestParameters.bTVariableStudioScopeInfo was null or undefined when calling setVariableStudioScope.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/w/{wid}/e/{eid}/variablestudioscope`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTVariableStudioScopeInfoToJSON(requestParameters.bTVariableStudioScopeInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set the scope of a variable studio
     * Set the scope of a variable studio
     */
    async setVariableStudioScope(requestParameters: SetVariableStudioScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setVariableStudioScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign variables to a variable studio
     * Assign variables to a variable studio
     */
    async setVariablesRaw(requestParameters: SetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling setVariables.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling setVariables.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling setVariables.');
        }

        if (requestParameters.bTVariableParams === null || requestParameters.bTVariableParams === undefined) {
            throw new runtime.RequiredError('bTVariableParams','Required parameter requestParameters.bTVariableParams was null or undefined when calling setVariables.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/w/{wid}/e/{eid}/variables`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.bTVariableParams.map(BTVariableParamsToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Assign variables to a variable studio
     * Assign variables to a variable studio
     */
    async setVariables(requestParameters: SetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setVariablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetVariableStudioReferencesWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetVariableStudioReferencesWvEnum = typeof GetVariableStudioReferencesWvEnum[keyof typeof GetVariableStudioReferencesWvEnum];
/**
 * @export
 */
export const GetVariableStudioScopeWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetVariableStudioScopeWvEnum = typeof GetVariableStudioScopeWvEnum[keyof typeof GetVariableStudioScopeWvEnum];
/**
 * @export
 */
export const GetVariablesWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetVariablesWvEnum = typeof GetVariablesWvEnum[keyof typeof GetVariablesWvEnum];
