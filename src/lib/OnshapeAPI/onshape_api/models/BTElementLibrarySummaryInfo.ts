/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn\'t used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here\'s [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.164.16301-d273853a12e7
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Element library metadata
 * @export
 * @interface BTElementLibrarySummaryInfo
 */
export interface BTElementLibrarySummaryInfo {
    /**
     * URI to fetch complete information of the resource.
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    href?: string;
    /**
     * Id of the resource.
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    id?: string;
    /**
     * The Id of the library -- unique across Onshape.
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    libraryId?: string;
    /**
     * The current version Id of the library.
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    libraryVersion?: string;
    /**
     * Name of the resource.
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    name?: string;
    /**
     * The owner Id of an element library (either Onshape, company, or user).
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    ownerId?: string;
    /**
     * The type of library owner, Onshape, user, or company
     * @type {number}
     * @memberof BTElementLibrarySummaryInfo
     */
    ownerType?: number;
    /**
     * The purpose string identifying the type of element library.
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    purpose?: string;
    /**
     * The id of the root folder of the library
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    sourceFolderId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     * @type {string}
     * @memberof BTElementLibrarySummaryInfo
     */
    viewRef?: string;
}

/**
 * Check if a given object implements the BTElementLibrarySummaryInfo interface.
 */
export function instanceOfBTElementLibrarySummaryInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTElementLibrarySummaryInfoFromJSON(json: any): BTElementLibrarySummaryInfo {
    return BTElementLibrarySummaryInfoFromJSONTyped(json, false);
}

export function BTElementLibrarySummaryInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTElementLibrarySummaryInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'href': !exists(json, 'href') ? undefined : json['href'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'libraryId': !exists(json, 'libraryId') ? undefined : json['libraryId'],
        'libraryVersion': !exists(json, 'libraryVersion') ? undefined : json['libraryVersion'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'ownerType': !exists(json, 'ownerType') ? undefined : json['ownerType'],
        'purpose': !exists(json, 'purpose') ? undefined : json['purpose'],
        'sourceFolderId': !exists(json, 'sourceFolderId') ? undefined : json['sourceFolderId'],
        'viewRef': !exists(json, 'viewRef') ? undefined : json['viewRef'],
    };
}

export function BTElementLibrarySummaryInfoToJSON(value?: BTElementLibrarySummaryInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'href': value.href,
        'id': value.id,
        'libraryId': value.libraryId,
        'libraryVersion': value.libraryVersion,
        'name': value.name,
        'ownerId': value.ownerId,
        'ownerType': value.ownerType,
        'purpose': value.purpose,
        'sourceFolderId': value.sourceFolderId,
        'viewRef': value.viewRef,
    };
}

