/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn\'t used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here\'s [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.164.16301-d273853a12e7
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     BTJPathIndex1871FromJSONTyped,
     BTJPathKey3221FromJSONTyped
} from './index';

/**
 * Identifies a node in the json sturcture, beginning at the specified startNode.
 * @export
 * @interface BTJPathElement2297
 */
export interface BTJPathElement2297 {
    /**
     * 
     * @type {string}
     * @memberof BTJPathElement2297
     */
    btType?: string;
}

/**
 * Check if a given object implements the BTJPathElement2297 interface.
 */
export function instanceOfBTJPathElement2297(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTJPathElement2297FromJSON(json: any): BTJPathElement2297 {
    return BTJPathElement2297FromJSONTyped(json, false);
}

export function BTJPathElement2297FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTJPathElement2297 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTJPathIndex-1871') {
            return BTJPathIndex1871FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTJPathKey-3221') {
            return BTJPathKey3221FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
    };
}

export function BTJPathElement2297ToJSON(value?: BTJPathElement2297 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
    };
}

