/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn\'t used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here\'s [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.164.16301-d273853a12e7
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTAPIWorkflowableType } from './BTAPIWorkflowableType';
import {
    BTAPIWorkflowableTypeFromJSON,
    BTAPIWorkflowableTypeFromJSONTyped,
    BTAPIWorkflowableTypeToJSON,
} from './BTAPIWorkflowableType';
import type { BTMetadataStateType } from './BTMetadataStateType';
import {
    BTMetadataStateTypeFromJSON,
    BTMetadataStateTypeFromJSONTyped,
    BTMetadataStateTypeToJSON,
} from './BTMetadataStateType';

/**
 * An workflowable object like Release or Task that supports states and transitions.
 * @export
 * @interface BTObjectWorkflowInfo
 */
export interface BTObjectWorkflowInfo {
    /**
     * Whether workflowable object can be discarded.
     * @type {boolean}
     * @memberof BTObjectWorkflowInfo
     */
    canBeDiscarded?: boolean;
    /**
     * URI to fetch complete information of the resource.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    href?: string;
    /**
     * Id of the resource.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    id?: string;
    /**
     * Whether workflowable object has been discarded.
     * @type {boolean}
     * @memberof BTObjectWorkflowInfo
     */
    isDiscarded?: boolean;
    /**
     * Whether workflowable object has reached terminal state and is frozen.
     * @type {boolean}
     * @memberof BTObjectWorkflowInfo
     */
    isFrozen?: boolean;
    /**
     * 
     * @type {BTMetadataStateType}
     * @memberof BTObjectWorkflowInfo
     */
    metadataState?: BTMetadataStateType;
    /**
     * Name of the resource.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    name?: string;
    /**
     * 
     * @type {BTAPIWorkflowableType}
     * @memberof BTObjectWorkflowInfo
     */
    objectType?: BTAPIWorkflowableType;
    /**
     * The current state of object like SETUP, REJECTED etc. Custom workflows can have any declared state.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    stateId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    viewRef?: string;
    /**
     * The workflow definition id that governs this object's states and transitions.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    workflowId?: string;
}

/**
 * Check if a given object implements the BTObjectWorkflowInfo interface.
 */
export function instanceOfBTObjectWorkflowInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTObjectWorkflowInfoFromJSON(json: any): BTObjectWorkflowInfo {
    return BTObjectWorkflowInfoFromJSONTyped(json, false);
}

export function BTObjectWorkflowInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTObjectWorkflowInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'canBeDiscarded': !exists(json, 'canBeDiscarded') ? undefined : json['canBeDiscarded'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isDiscarded': !exists(json, 'isDiscarded') ? undefined : json['isDiscarded'],
        'isFrozen': !exists(json, 'isFrozen') ? undefined : json['isFrozen'],
        'metadataState': !exists(json, 'metadataState') ? undefined : BTMetadataStateTypeFromJSON(json['metadataState']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'objectType': !exists(json, 'objectType') ? undefined : BTAPIWorkflowableTypeFromJSON(json['objectType']),
        'stateId': !exists(json, 'stateId') ? undefined : json['stateId'],
        'viewRef': !exists(json, 'viewRef') ? undefined : json['viewRef'],
        'workflowId': !exists(json, 'workflowId') ? undefined : json['workflowId'],
    };
}

export function BTObjectWorkflowInfoToJSON(value?: BTObjectWorkflowInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'canBeDiscarded': value.canBeDiscarded,
        'href': value.href,
        'id': value.id,
        'isDiscarded': value.isDiscarded,
        'isFrozen': value.isFrozen,
        'metadataState': BTMetadataStateTypeToJSON(value.metadataState),
        'name': value.name,
        'objectType': BTAPIWorkflowableTypeToJSON(value.objectType),
        'stateId': value.stateId,
        'viewRef': value.viewRef,
        'workflowId': value.workflowId,
    };
}

