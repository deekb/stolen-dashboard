import type {Actions, PageServerLoad} from './$types';
import {fail, redirect} from "@sveltejs/kit";
import type {Board} from "$lib/trelloAPI/api/models";
import type {OauthTrelloClient} from "$lib/trelloClient";
import type {BTTeamInfo} from "$lib/OnshapeAPI";
import {superValidate} from "sveltekit-superforms/server";
import {createProjectSchema} from "./createProject.schema";
import type {ProjectModel} from "$lib/schema";
import {getOauth1TokenFromCookie, type Oauth1AccessToken, trelloCookieName} from "$lib/trello";

const getUserBoards = async (trello: OauthTrelloClient) => {
    const me = await trello.members.getMember({id: "me"});

    // Build list of urls to batch request
    const urls = (me.idBoards || []).map(id => `/boards/${id}?lists=open`).join(",")

    const batchRes = await trello.batch.getBatch<{ [key: string]: Board }[]>({urls});

    const boards = batchRes.map(b => b['200']);

    return boards
}

export const load = (async ({locals: {db, onshape: Onshape, trello}, cookies, url: {searchParams}}) => {

    if (!Onshape.client) {
        throw Onshape.loginRedirect()
    }

    if (!trello.client) {
        throw await trello.loginRedirect();
    }

    const currentUserTeams = await Onshape.client.TeamApi.find({});
    //@todo handle users with more than one page of teams

    const form = await superValidate(createProjectSchema);

    return {
        trelloBoards: await getUserBoards(trello.client),
        onshapeTeams: currentUserTeams.items!,
        form
    };
}) satisfies PageServerLoad<{ trelloBoards: Board[], onshapeTeams: BTTeamInfo[] }>;

export const actions = {
    default: async (event) => {
        const form = await superValidate(event.request, createProjectSchema);

        // Convenient validation check:
        if (!form.valid) {
            // Again, always return { form } and things will just work.
            return fail(400, {form});
        }

        console.log("Create New Project", form.data);

        if (!event.locals.onshape.client) {
            throw event.locals.onshape.loginRedirect(); //@todo this will loose data if the user submits and is not logged in
        }

        const userInfo = await event.locals.onshape.client.UserApi.sessionInfo();

        if (!event.locals.trello.client) {
            throw await event.locals.trello.loginRedirect(); //@todo this will loose data if the user submits and is not logged in
        }

        const trelloToken = getOauth1TokenFromCookie(event.cookies, trelloCookieName) as Oauth1AccessToken;

        const data: ProjectModel = {
            id: undefined as any, // projectId is generated by the database
            name: form.data.name,
            data: {
                onshape: {
                    docIds: form.data.documents.filter(d => d !== undefined) as string[],
                    access: {
                        write: form.data.onshapeTeamsWrite.map(t => ({teamId: t.value})) //(inputData.onshapeTeamsWrite as string[]).map(team => ({teamId: team as string})),
                    },
                    projectOwnerId: userInfo.id!
                },
                trello: {
                    boardId: form.data.trelloBoardAndList.value.board,
                    listId: form.data.trelloBoardAndList.value.list,
                    token: {
                        oauthAccessToken: trelloToken.oauthAccessToken,
                        oauthAccessTokenSecret: trelloToken.oauthAccessTokenSecret,
                        expiryTimestamp: trelloToken.expiryTimestamp
                    }
                }
            }
        };
        let project;
        try {
            project = await event.locals.db.addNewProject(data);
        } catch (e: any) {
            console.log("fail", e); //@todo handle this better
            return fail(500, {message: e?.message, form});
        }

        // success
        if (form.data.queryState) {
            // 303 = request changed to GET and body thrown away as we have already processed it
            throw redirect(303, `/onshape/release/?${form.data.queryState}`);
        } else {
            // 303 = request changed to GET and body thrown away as we have already processed it
            throw redirect(303, `/project/${project.id}`);
        }
    },

} satisfies Actions;
